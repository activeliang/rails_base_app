#!/bin/bash

target_host=xx.x.x.x.x # 这里改成你要部署的ip
proxy_command=(-o ProxyCommand="nc -X 5 -x 127.0.0.1:7890 %h %p") # 这里是你要使用的http代理端口
rsync_proxy=(--rsh="ssh -o 'ProxyCommand=nc -X 5 -x 127.0.0.1:7890 %h %p'") # 这里是你要使用的http代理端口

# 函数名称：color_echo
# 参数：
# $1：字符串内容
# $2：颜色代码（可选，默认为34，即蓝色）
color_echo() {
  local message="$1"
  local color_code="${2:-34}"  # 默认为蓝色
  echo -e "\033[${color_code}m${message}\033[0m"
}

# 定义一个函数来处理 Control + C 信号
handle_sigint() {
  color_echo "User interrupted script execution. Exiting..."
  exit 130
}

# 在脚本开始时设置 trap，以便在接收到 SIGINT 信号时调用 handle_sigint 函数
trap handle_sigint SIGINT

# 开始参数判断
skip_first_two_steps=false
while getopts ":f" opt; do
  case ${opt} in
    f ) skip_first_two_steps=true ;;
    \? ) echo "Usage: script.sh [-f]"; exit 1 ;;
  esac
done

if ! $skip_first_two_steps; then
  color_echo "Build docker_app..."
  if ! RAILS_ENV=production docker build ./ --platform linux/amd64 -t activeliang/my_app-web -f ./.docker/Dockerfile --build-arg RAILS_ENV=production --build-arg HTTP_PROXY=http://host.docker.internal:7890 --build-arg https_proxy=http://host.docker.internal:7890; then
    color_echo "docker build 失败", 31
    exit 1
  fi

  color_echo "Push docker_app..."
  if ! docker push activeliang/my_app-web; then
    color_echo "docker push 失败", 31
    exit 1
  fi
  
fi


color_echo "Init work folder"
ssh -t "${proxy_command[@]}" root@$target_host 'mkdir -p /home/deploy && mkdir -p /home/deploy/my_app'

color_echo "Update docker-compose.yml"
scp "${proxy_command[@]}" ./.docker/docker-compose-production.yml root@$target_host:/home/deploy/my_app/docker-compose.yml

color_echo "Update nginx.conf"
scp "${proxy_command[@]}" ./.docker/nginx.conf root@$target_host:/etc/nginx/conf.d/my_app.conf

color_echo "Sync .docker directory"
rsync "${rsync_proxy[@]}" -av --delete ./.docker/ root@$target_host:/home/deploy/my_app/.docker/

test_commands=$(cat << EOF

color_echo() {
  echo "\$(tput setaf 2)\$1\$(tput sgr0)"
}

color_echo "checking log ln"
ln -ns /var/log/my_app-web /home/deploy/my_app-web/log

color_echo "checking Database exist"
sudo -u postgres psql -lqt 2>/dev/null | cut -d "|" -f 1 | grep -w 'my_app' > /dev/null 2>&1 || (sudo -u postgres createdb my_app && echo "数据库已成功创建")

color_echo "Pull Image from Docker Hub"
docker pull activeliang/my_app-web

color_echo "Change remote pg user and password"
sed -i "s/POSTGRES_USER=liang/POSTGRES_USER=postgres/g" /home/deploy/my_app/.docker/env_production.env && sed -i "s/POSTGRES_PASSWORD=postgres/POSTGRES_PASSWORD=mypassword/g" /home/deploy/my_app/.docker/env_production.env

color_echo "Init log folder"
mkdir -p /tmp/sockets/my_app && mkdir -p /var/www/my_app

color_echo "Add monitor nginx conf"
chmod +x /home/deploy/my_app/.docker/monitor_nginx_conf.sh
chmod +x /home/deploy/my_app/.docker/init_monitor_systemd.sh && /home/deploy/my_app/.docker/init_monitor_systemd.sh

# 先清空已经退出的容器
color_echo "clean exited container"
set -e
docker rm \$(docker ps -a -q -f status=exited) > /dev/null 2>&1 || true

cd /home/deploy/my_app
container_count=\$(docker ps --format '{{.Names}}' | grep "my_app" | grep "web" | wc -l)
docker-compose up -d --no-deps --no-recreate
[ \$container_count -ge 1 ] && docker rollout -t 600 web # 当已经有web实例才使用rollout

color_echo "refresh nginx conf"
source /home/deploy/my_app/.docker/simple_upstream_to_nginx.sh && update_nginx_conf >/dev/null 2>&1

# 清理过期的镜像
# color_echo "clear docker images"
# docker system prune -a -f | tail -n 1
EOF
)


ssh -t "${proxy_command[@]}" root@$target_host "echo -e '${test_commands}' | bash"

